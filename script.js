// The import below is a copy of the API fetched on 07/04/2024 at https://jacintodesign.github.io/quotes-api/data/quotes.json
import { quotes } from './apiQuotes.js';


// --------------------------------------------- //
// ------------- SET FILTER OBJECT ------------- //
// --------------------------------------------- //

let filter = {
    tag: null,
    author: null
}


// -------------------------------------------- //
// ------ WORKING ON THE QUOTE CONTAINER ------ //
// -------------------------------------------- //

// Get the HTML elements
const quoteContainer = document.getElementById('quote-container');
const quoteText = document.getElementById('quote');
const authorText = document.getElementById('author');
const twitterBtn = document.getElementById('twitter');
const newQuoteBtn = document.getElementById('new-quote');
const loader = document.getElementById('loader');

// Show New Quote

// Show Loading
const loading = () => {
    loader.hidden = false;
    quoteContainer.hidden = true;
}

// Hide Loading
const complete = () => {
    loader.hidden = true;
    quoteContainer.hidden = false;
}

// Get a new Quote
const newQuote = () => {
    // Loader
    loading();

    // Filter quotes
    const filteredQuotes = quotes.filter(quote => {
        let value = true;
        if (filter.author && quote.author !== filter.author) {
            value = false;
        }
        if (filter.tag && quote.tag !== filter.tag) {
            value = false;
        }
        return value;
    })

    // Pick a random number
    const max = filteredQuotes.length;
    const random = Math.floor(Math.random() * max);

    // Pick a random quote from API quote array
    const { text, author, tag } = filteredQuotes[random];

    // Set the author, or put Unknown if Anonymous
    if (author === 'Anonymous') {
        authorText.textContent = 'Unknown';
    } else {
        authorText.textContent = author;
    }

    // Change to smaller font it quote is long enough
    if (text.length > 50) {
        quoteText.classList.add('long-quote');
    } else {
        quoteText.classList.remove('long-quote');
    }

    // Set the text of the quote
    quoteText.textContent = text;

    // Create the URL for the tweet and set it to the Button

    const currentUrl = window.location.href;
    const attribution = `Quote generated by ${currentUrl}`;
    const tweet = `"${text}"%0A- ${author}%0A%0A${attribution}`;
    const tweetUrl = new URL(`tweet?text=${tweet}`,"https://twitter.com/intent/").href;

    twitterBtn.setAttribute("href", tweetUrl);

    // Stop loading and show quote
    complete();

    // Here we won't see the loader because we get the data locally instead of using fetch, but we can test it using setTimeout instead of just calling the function:
    // setTimeout(complete,5000);
}


// ------------------------------------------- //
// -------- WORKING ON THE SEARCH BAR -------- //
// ------------------------------------------- //

const authorList = [];
const tagList = [];

// Get lists of Authors and Tags
const getList = (property, list) => {
    quotes.forEach(quote => {
        let current = quote[property].toLowerCase();
        if (!list.includes(current) && current.length) {
            list.push(current);
        }
    })
}

getList('author', authorList);
getList('tag', tagList);

// Set HTML Elements
const searchInput = document.getElementById('searchInput');
const searchIcon = document.getElementById('searchIcon');
const suggestionsList = document.getElementById('suggestions');
const errorMessage = document.getElementById('errorMessage');
const cancelButton = document.getElementById('cancelButton');
const filterElement = document.getElementById('filter');
const dropdown = document.getElementById('dropdown');
let suggestionItems;

// Function to reset filters and searchbar
const resetSearchBar = () => {
    searchInput.value = '';
    errorMessage.style.display = 'none';
    cancelButton.style.display = 'none';
    suggestionItems.forEach(item => item.style.display = 'none');
}

// Create HTML Elements for TAGS
tagList.forEach(tag => {
    const newSuggestion = document.createElement('a');
    newSuggestion.style.display = 'none';
    const textNode = document.createTextNode(tag);
    newSuggestion.appendChild(textNode);
    newSuggestion.addEventListener('click', (event) => {
        filter.tag = tag;
        newQuote();
        resetSearchBar();
        searchInput.style.display = 'none';
        const newNode = document.createTextNode(tag);
        filterElement.appendChild(newNode);
        filterElement.style.display = 'block';
        searchIcon.style.display = 'none';
        suggestionsList.style.display = 'none';
        cancelButton.style.display = 'block';
        dropdown.style.display = 'none';
    })
    suggestionsList.appendChild(newSuggestion);
})

suggestionItems = suggestionsList.querySelectorAll('a');

// Show/Hide Suggestions
searchInput.addEventListener('input', function () {
    const inputValue = this.value.trim().toLowerCase();
    
    cancelButton.style.display = inputValue.length > 0 ? 'block' : 'none';
    suggestionsList.style.display = inputValue.length > 0 ? 'block' : 'none';

    let itemCount = 0;

    // Change display based on Input Text & update count
    suggestionItems.forEach(item => {
        const thisTag = item.textContent.toLowerCase();
        if (thisTag.includes(inputValue)) {
            item.style.display = 'block';
            itemCount ++;
        } else {
            item.style.display = 'none';
        }
    });
    
    errorMessage.style.display = itemCount === 0 ? 'block' : 'none';
});

dropdown.addEventListener('click', () => {
    suggestionsList.style.display = 'block';
    suggestionItems.forEach(item => item.style.display = 'block');
    cancelButton.style.display = 'block';
    dropdown.style.display = 'none';
})

cancelButton.addEventListener('click', () => {
    resetSearchBar();
    searchInput.style.display = 'block';
    if (filterElement.childNodes[0]) filterElement.childNodes[0].remove();
    filterElement.style.display = 'none';
    searchIcon.style.display = 'block';
    suggestionsList.style.display = 'block';
    cancelButton.style.display = 'none';
    dropdown.style.display = 'block';
    filter.tag = null;
});


// ------------------------------------------ //
// ------------- ON INITAL LOAD ------------- //
// ------------------------------------------ //

// On Click 'New Quote' Button
newQuoteBtn.addEventListener('click', newQuote);

searchInput.value = '';

// Load Initial Quote
newQuote();